Nonterminals useless in grammar

   ret_stat
   ret_stat_part
   attribute_list
   attribute
   par_list
   name_list
   body_constructor
   label
   field_list
   field
   field_sep


Terminals unused in grammar

   TWOQ
   ONEQ
   NESTED_STR
   ASSIGN
   DO
   WHILE
   FOR
   UNTIL
   REPEAT
   END
   IF
   THEN
   ELSEIF
   ELSE
   LOCAL
   FUNCTION
   BREAK
   RETURN
   LABEL_DEF
   '{'
   '}'
   '='
   ';'


Rules useless in grammar

   35 ret_stat: ret_stat_part
   36         | RETURN

   37 ret_stat_part: ret_stat_part ',' exp
   38              | ret_stat_part ',' NAME
   39              | RETURN exp
   40              | RETURN NAME

   41 attribute_list: attribute_list ',' attribute
   42               | attribute_list ',' NAME
   43               | attribute
   44               | name_list ',' attribute
   45               | attribute ',' NAME

   46 attribute: NAME '<' NAME '>'
   47          | NAME '<' '>'

   48 par_list: name_list
   49         | name_list ',' DOTS
   50         | DOTS

   51 name_list: name_list ',' NAME
   52          | NAME

   53 body_constructor: '{' field_list '}'
   54                 | '{' '}'

   55 label: LABEL_DEF NAME LABEL_DEF

   56 field_list: field_list field_sep
   57           | field_list field_sep field
   58           | field field_sep field
   59           | field
   60           | field field_sep

   61 field: '[' exp ']' '=' exp
   62      | NAME '=' exp
   63      | exp

   64 field_sep: ','
   65          | ';'


State 43 conflicts: 4 shift/reduce
State 44 conflicts: 4 shift/reduce
State 53 conflicts: 4 shift/reduce
State 54 conflicts: 1 shift/reduce
State 55 conflicts: 4 shift/reduce
State 56 conflicts: 4 shift/reduce
State 57 conflicts: 2 shift/reduce
State 58 conflicts: 2 shift/reduce


Grammar

    0 $accept: main $end

    1 main: func_call

    2 var: NAME '.' NAME
    3    | var '.' NAME
    4    | var '[' exp ']'
    5    | var '[' NAME ']'
    6    | NAME '[' exp ']'
    7    | NAME '[' NAME ']'

    8 func_call: args_call ')'

    9 args_call: func_call_part
   10          | args_call ',' exp
   11          | args_call ',' NAME

   12 func_call_part: var '('
   13               | var ':' NAME '('

   14 exp: NIL
   15    | FALSE
   16    | TRUE
   17    | DOTS
   18    | exp BINOP exp
   19    | exp MINUS exp
   20    | MINUS exp
   21    | UNOP exp
   22    | NAME BINOP exp
   23    | exp BINOP NAME
   24    | exp '<' exp
   25    | exp '>' exp
   26    | numeral
   27    | literalString

   28 literalString: ONEQSTRING
   29              | TWOQSTRING
   30              | LONGSTRING

   31 numeral: INT
   32        | HEX
   33        | FLOAT
   34        | HEX_FLOAT


Terminals, with rules where they appear

$end (0) 0
'(' (40) 12 13
')' (41) 8
',' (44) 10 11
'.' (46) 2 3
':' (58) 13
';' (59)
'<' (60) 24
'=' (61)
'>' (62) 25
'[' (91) 4 5 6 7
']' (93) 4 5 6 7
'{' (123)
'}' (125)
error (256)
INT (258) 31
HEX (259) 32
FLOAT (260) 33
HEX_FLOAT (261) 34
TWOQ (262)
ONEQ (263)
ONEQSTRING (264) 28
TWOQSTRING (265) 29
LONGSTRING (266) 30
NESTED_STR (267)
NAME (268) 2 3 5 6 7 11 13 22 23
DOTS (269) 17
NIL (270) 14
FALSE (271) 15
TRUE (272) 16
BINOP (273) 18 22 23
UNOP (274) 21
MINUS (275) 19 20
ASSIGN (276)
DO (277)
WHILE (278)
FOR (279)
UNTIL (280)
REPEAT (281)
END (282)
IF (283)
THEN (284)
ELSEIF (285)
ELSE (286)
LOCAL (287)
FUNCTION (288)
BREAK (289)
RETURN (290)
LABEL_DEF (291)


Nonterminals, with rules where they appear

$accept (50)
    on left: 0
main (51)
    on left: 1, on right: 0
var (52)
    on left: 2 3 4 5 6 7, on right: 3 4 5 12 13
func_call (53)
    on left: 8, on right: 1
args_call (54)
    on left: 9 10 11, on right: 8 10 11
func_call_part (55)
    on left: 12 13, on right: 9
exp (56)
    on left: 14 15 16 17 18 19 20 21 22 23 24 25 26 27, on right: 4
    6 10 18 19 20 21 22 23 24 25
literalString (57)
    on left: 28 29 30, on right: 27
numeral (58)
    on left: 31 32 33 34, on right: 26


State 0

    0 $accept: . main $end

    NAME  shift, and go to state 1

    main            go to state 2
    var             go to state 3
    func_call       go to state 4
    args_call       go to state 5
    func_call_part  go to state 6


State 1

    2 var: NAME . '.' NAME
    6    | NAME . '[' exp ']'
    7    | NAME . '[' NAME ']'

    '.'  shift, and go to state 7
    '['  shift, and go to state 8


State 2

    0 $accept: main . $end

    $end  shift, and go to state 9


State 3

    3 var: var . '.' NAME
    4    | var . '[' exp ']'
    5    | var . '[' NAME ']'
   12 func_call_part: var . '('
   13               | var . ':' NAME '('

    '.'  shift, and go to state 10
    '['  shift, and go to state 11
    '('  shift, and go to state 12
    ':'  shift, and go to state 13


State 4

    1 main: func_call .

    $default  reduce using rule 1 (main)


State 5

    8 func_call: args_call . ')'
   10 args_call: args_call . ',' exp
   11          | args_call . ',' NAME

    ')'  shift, and go to state 14
    ','  shift, and go to state 15


State 6

    9 args_call: func_call_part .

    $default  reduce using rule 9 (args_call)


State 7

    2 var: NAME '.' . NAME

    NAME  shift, and go to state 16


State 8

    6 var: NAME '[' . exp ']'
    7    | NAME '[' . NAME ']'

    INT         shift, and go to state 17
    HEX         shift, and go to state 18
    FLOAT       shift, and go to state 19
    HEX_FLOAT   shift, and go to state 20
    ONEQSTRING  shift, and go to state 21
    TWOQSTRING  shift, and go to state 22
    LONGSTRING  shift, and go to state 23
    NAME        shift, and go to state 24
    DOTS        shift, and go to state 25
    NIL         shift, and go to state 26
    FALSE       shift, and go to state 27
    TRUE        shift, and go to state 28
    UNOP        shift, and go to state 29
    MINUS       shift, and go to state 30

    exp            go to state 31
    literalString  go to state 32
    numeral        go to state 33


State 9

    0 $accept: main $end .

    $default  accept


State 10

    3 var: var '.' . NAME

    NAME  shift, and go to state 34


State 11

    4 var: var '[' . exp ']'
    5    | var '[' . NAME ']'

    INT         shift, and go to state 17
    HEX         shift, and go to state 18
    FLOAT       shift, and go to state 19
    HEX_FLOAT   shift, and go to state 20
    ONEQSTRING  shift, and go to state 21
    TWOQSTRING  shift, and go to state 22
    LONGSTRING  shift, and go to state 23
    NAME        shift, and go to state 35
    DOTS        shift, and go to state 25
    NIL         shift, and go to state 26
    FALSE       shift, and go to state 27
    TRUE        shift, and go to state 28
    UNOP        shift, and go to state 29
    MINUS       shift, and go to state 30

    exp            go to state 36
    literalString  go to state 32
    numeral        go to state 33


State 12

   12 func_call_part: var '(' .

    $default  reduce using rule 12 (func_call_part)


State 13

   13 func_call_part: var ':' . NAME '('

    NAME  shift, and go to state 37


State 14

    8 func_call: args_call ')' .

    $default  reduce using rule 8 (func_call)


State 15

   10 args_call: args_call ',' . exp
   11          | args_call ',' . NAME

    INT         shift, and go to state 17
    HEX         shift, and go to state 18
    FLOAT       shift, and go to state 19
    HEX_FLOAT   shift, and go to state 20
    ONEQSTRING  shift, and go to state 21
    TWOQSTRING  shift, and go to state 22
    LONGSTRING  shift, and go to state 23
    NAME        shift, and go to state 38
    DOTS        shift, and go to state 25
    NIL         shift, and go to state 26
    FALSE       shift, and go to state 27
    TRUE        shift, and go to state 28
    UNOP        shift, and go to state 29
    MINUS       shift, and go to state 30

    exp            go to state 39
    literalString  go to state 32
    numeral        go to state 33


State 16

    2 var: NAME '.' NAME .

    $default  reduce using rule 2 (var)


State 17

   31 numeral: INT .

    $default  reduce using rule 31 (numeral)


State 18

   32 numeral: HEX .

    $default  reduce using rule 32 (numeral)


State 19

   33 numeral: FLOAT .

    $default  reduce using rule 33 (numeral)


State 20

   34 numeral: HEX_FLOAT .

    $default  reduce using rule 34 (numeral)


State 21

   28 literalString: ONEQSTRING .

    $default  reduce using rule 28 (literalString)


State 22

   29 literalString: TWOQSTRING .

    $default  reduce using rule 29 (literalString)


State 23

   30 literalString: LONGSTRING .

    $default  reduce using rule 30 (literalString)


State 24

    7 var: NAME '[' NAME . ']'
   22 exp: NAME . BINOP exp

    BINOP  shift, and go to state 40
    ']'    shift, and go to state 41


State 25

   17 exp: DOTS .

    $default  reduce using rule 17 (exp)


State 26

   14 exp: NIL .

    $default  reduce using rule 14 (exp)


State 27

   15 exp: FALSE .

    $default  reduce using rule 15 (exp)


State 28

   16 exp: TRUE .

    $default  reduce using rule 16 (exp)


State 29

   21 exp: UNOP . exp

    INT         shift, and go to state 17
    HEX         shift, and go to state 18
    FLOAT       shift, and go to state 19
    HEX_FLOAT   shift, and go to state 20
    ONEQSTRING  shift, and go to state 21
    TWOQSTRING  shift, and go to state 22
    LONGSTRING  shift, and go to state 23
    NAME        shift, and go to state 42
    DOTS        shift, and go to state 25
    NIL         shift, and go to state 26
    FALSE       shift, and go to state 27
    TRUE        shift, and go to state 28
    UNOP        shift, and go to state 29
    MINUS       shift, and go to state 30

    exp            go to state 43
    literalString  go to state 32
    numeral        go to state 33


State 30

   20 exp: MINUS . exp

    INT         shift, and go to state 17
    HEX         shift, and go to state 18
    FLOAT       shift, and go to state 19
    HEX_FLOAT   shift, and go to state 20
    ONEQSTRING  shift, and go to state 21
    TWOQSTRING  shift, and go to state 22
    LONGSTRING  shift, and go to state 23
    NAME        shift, and go to state 42
    DOTS        shift, and go to state 25
    NIL         shift, and go to state 26
    FALSE       shift, and go to state 27
    TRUE        shift, and go to state 28
    UNOP        shift, and go to state 29
    MINUS       shift, and go to state 30

    exp            go to state 44
    literalString  go to state 32
    numeral        go to state 33


State 31

    6 var: NAME '[' exp . ']'
   18 exp: exp . BINOP exp
   19    | exp . MINUS exp
   23    | exp . BINOP NAME
   24    | exp . '<' exp
   25    | exp . '>' exp

    BINOP  shift, and go to state 45
    MINUS  shift, and go to state 46
    '<'    shift, and go to state 47
    '>'    shift, and go to state 48
    ']'    shift, and go to state 49


State 32

   27 exp: literalString .

    $default  reduce using rule 27 (exp)


State 33

   26 exp: numeral .

    $default  reduce using rule 26 (exp)


State 34

    3 var: var '.' NAME .

    $default  reduce using rule 3 (var)


State 35

    5 var: var '[' NAME . ']'
   22 exp: NAME . BINOP exp

    BINOP  shift, and go to state 40
    ']'    shift, and go to state 50


State 36

    4 var: var '[' exp . ']'
   18 exp: exp . BINOP exp
   19    | exp . MINUS exp
   23    | exp . BINOP NAME
   24    | exp . '<' exp
   25    | exp . '>' exp

    BINOP  shift, and go to state 45
    MINUS  shift, and go to state 46
    '<'    shift, and go to state 47
    '>'    shift, and go to state 48
    ']'    shift, and go to state 51


State 37

   13 func_call_part: var ':' NAME . '('

    '('  shift, and go to state 52


State 38

   11 args_call: args_call ',' NAME .
   22 exp: NAME . BINOP exp

    BINOP  shift, and go to state 40

    $default  reduce using rule 11 (args_call)


State 39

   10 args_call: args_call ',' exp .
   18 exp: exp . BINOP exp
   19    | exp . MINUS exp
   23    | exp . BINOP NAME
   24    | exp . '<' exp
   25    | exp . '>' exp

    BINOP  shift, and go to state 45
    MINUS  shift, and go to state 46
    '<'    shift, and go to state 47
    '>'    shift, and go to state 48

    $default  reduce using rule 10 (args_call)


State 40

   22 exp: NAME BINOP . exp

    INT         shift, and go to state 17
    HEX         shift, and go to state 18
    FLOAT       shift, and go to state 19
    HEX_FLOAT   shift, and go to state 20
    ONEQSTRING  shift, and go to state 21
    TWOQSTRING  shift, and go to state 22
    LONGSTRING  shift, and go to state 23
    NAME        shift, and go to state 42
    DOTS        shift, and go to state 25
    NIL         shift, and go to state 26
    FALSE       shift, and go to state 27
    TRUE        shift, and go to state 28
    UNOP        shift, and go to state 29
    MINUS       shift, and go to state 30

    exp            go to state 53
    literalString  go to state 32
    numeral        go to state 33


State 41

    7 var: NAME '[' NAME ']' .

    $default  reduce using rule 7 (var)


State 42

   22 exp: NAME . BINOP exp

    BINOP  shift, and go to state 40


State 43

   18 exp: exp . BINOP exp
   19    | exp . MINUS exp
   21    | UNOP exp .
   23    | exp . BINOP NAME
   24    | exp . '<' exp
   25    | exp . '>' exp

    BINOP  shift, and go to state 45
    MINUS  shift, and go to state 46
    '<'    shift, and go to state 47
    '>'    shift, and go to state 48

    BINOP     [reduce using rule 21 (exp)]
    MINUS     [reduce using rule 21 (exp)]
    '<'       [reduce using rule 21 (exp)]
    '>'       [reduce using rule 21 (exp)]
    $default  reduce using rule 21 (exp)


State 44

   18 exp: exp . BINOP exp
   19    | exp . MINUS exp
   20    | MINUS exp .
   23    | exp . BINOP NAME
   24    | exp . '<' exp
   25    | exp . '>' exp

    BINOP  shift, and go to state 45
    MINUS  shift, and go to state 46
    '<'    shift, and go to state 47
    '>'    shift, and go to state 48

    BINOP     [reduce using rule 20 (exp)]
    MINUS     [reduce using rule 20 (exp)]
    '<'       [reduce using rule 20 (exp)]
    '>'       [reduce using rule 20 (exp)]
    $default  reduce using rule 20 (exp)


State 45

   18 exp: exp BINOP . exp
   23    | exp BINOP . NAME

    INT         shift, and go to state 17
    HEX         shift, and go to state 18
    FLOAT       shift, and go to state 19
    HEX_FLOAT   shift, and go to state 20
    ONEQSTRING  shift, and go to state 21
    TWOQSTRING  shift, and go to state 22
    LONGSTRING  shift, and go to state 23
    NAME        shift, and go to state 54
    DOTS        shift, and go to state 25
    NIL         shift, and go to state 26
    FALSE       shift, and go to state 27
    TRUE        shift, and go to state 28
    UNOP        shift, and go to state 29
    MINUS       shift, and go to state 30

    exp            go to state 55
    literalString  go to state 32
    numeral        go to state 33


State 46

   19 exp: exp MINUS . exp

    INT         shift, and go to state 17
    HEX         shift, and go to state 18
    FLOAT       shift, and go to state 19
    HEX_FLOAT   shift, and go to state 20
    ONEQSTRING  shift, and go to state 21
    TWOQSTRING  shift, and go to state 22
    LONGSTRING  shift, and go to state 23
    NAME        shift, and go to state 42
    DOTS        shift, and go to state 25
    NIL         shift, and go to state 26
    FALSE       shift, and go to state 27
    TRUE        shift, and go to state 28
    UNOP        shift, and go to state 29
    MINUS       shift, and go to state 30

    exp            go to state 56
    literalString  go to state 32
    numeral        go to state 33


State 47

   24 exp: exp '<' . exp

    INT         shift, and go to state 17
    HEX         shift, and go to state 18
    FLOAT       shift, and go to state 19
    HEX_FLOAT   shift, and go to state 20
    ONEQSTRING  shift, and go to state 21
    TWOQSTRING  shift, and go to state 22
    LONGSTRING  shift, and go to state 23
    NAME        shift, and go to state 42
    DOTS        shift, and go to state 25
    NIL         shift, and go to state 26
    FALSE       shift, and go to state 27
    TRUE        shift, and go to state 28
    UNOP        shift, and go to state 29
    MINUS       shift, and go to state 30

    exp            go to state 57
    literalString  go to state 32
    numeral        go to state 33


State 48

   25 exp: exp '>' . exp

    INT         shift, and go to state 17
    HEX         shift, and go to state 18
    FLOAT       shift, and go to state 19
    HEX_FLOAT   shift, and go to state 20
    ONEQSTRING  shift, and go to state 21
    TWOQSTRING  shift, and go to state 22
    LONGSTRING  shift, and go to state 23
    NAME        shift, and go to state 42
    DOTS        shift, and go to state 25
    NIL         shift, and go to state 26
    FALSE       shift, and go to state 27
    TRUE        shift, and go to state 28
    UNOP        shift, and go to state 29
    MINUS       shift, and go to state 30

    exp            go to state 58
    literalString  go to state 32
    numeral        go to state 33


State 49

    6 var: NAME '[' exp ']' .

    $default  reduce using rule 6 (var)


State 50

    5 var: var '[' NAME ']' .

    $default  reduce using rule 5 (var)


State 51

    4 var: var '[' exp ']' .

    $default  reduce using rule 4 (var)


State 52

   13 func_call_part: var ':' NAME '(' .

    $default  reduce using rule 13 (func_call_part)


State 53

   18 exp: exp . BINOP exp
   19    | exp . MINUS exp
   22    | NAME BINOP exp .
   23    | exp . BINOP NAME
   24    | exp . '<' exp
   25    | exp . '>' exp

    BINOP  shift, and go to state 45
    MINUS  shift, and go to state 46
    '<'    shift, and go to state 47
    '>'    shift, and go to state 48

    BINOP     [reduce using rule 22 (exp)]
    MINUS     [reduce using rule 22 (exp)]
    '<'       [reduce using rule 22 (exp)]
    '>'       [reduce using rule 22 (exp)]
    $default  reduce using rule 22 (exp)


State 54

   22 exp: NAME . BINOP exp
   23    | exp BINOP NAME .

    BINOP  shift, and go to state 40

    BINOP     [reduce using rule 23 (exp)]
    $default  reduce using rule 23 (exp)


State 55

   18 exp: exp . BINOP exp
   18    | exp BINOP exp .
   19    | exp . MINUS exp
   23    | exp . BINOP NAME
   24    | exp . '<' exp
   25    | exp . '>' exp

    BINOP  shift, and go to state 45
    MINUS  shift, and go to state 46
    '<'    shift, and go to state 47
    '>'    shift, and go to state 48

    BINOP     [reduce using rule 18 (exp)]
    MINUS     [reduce using rule 18 (exp)]
    '<'       [reduce using rule 18 (exp)]
    '>'       [reduce using rule 18 (exp)]
    $default  reduce using rule 18 (exp)


State 56

   18 exp: exp . BINOP exp
   19    | exp . MINUS exp
   19    | exp MINUS exp .
   23    | exp . BINOP NAME
   24    | exp . '<' exp
   25    | exp . '>' exp

    BINOP  shift, and go to state 45
    MINUS  shift, and go to state 46
    '<'    shift, and go to state 47
    '>'    shift, and go to state 48

    BINOP     [reduce using rule 19 (exp)]
    MINUS     [reduce using rule 19 (exp)]
    '<'       [reduce using rule 19 (exp)]
    '>'       [reduce using rule 19 (exp)]
    $default  reduce using rule 19 (exp)


State 57

   18 exp: exp . BINOP exp
   19    | exp . MINUS exp
   23    | exp . BINOP NAME
   24    | exp . '<' exp
   24    | exp '<' exp .
   25    | exp . '>' exp

    BINOP  shift, and go to state 45
    MINUS  shift, and go to state 46
    '<'    shift, and go to state 47
    '>'    shift, and go to state 48

    BINOP     [reduce using rule 24 (exp)]
    MINUS     [reduce using rule 24 (exp)]
    $default  reduce using rule 24 (exp)


State 58

   18 exp: exp . BINOP exp
   19    | exp . MINUS exp
   23    | exp . BINOP NAME
   24    | exp . '<' exp
   25    | exp . '>' exp
   25    | exp '>' exp .

    BINOP  shift, and go to state 45
    MINUS  shift, and go to state 46
    '<'    shift, and go to state 47
    '>'    shift, and go to state 48

    BINOP     [reduce using rule 25 (exp)]
    MINUS     [reduce using rule 25 (exp)]
    $default  reduce using rule 25 (exp)
