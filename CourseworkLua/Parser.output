Terminals unused in grammar

   TWOQ
   ONEQ
   NESTED_STR
   DO
   WHILE
   FOR
   UNTIL
   REPEAT
   IF
   THEN
   ELSEIF
   ELSE
   LOCAL
   BREAK


State 8 conflicts: 1 shift/reduce
State 22 conflicts: 1 shift/reduce
State 30 conflicts: 2 shift/reduce
State 32 conflicts: 2 shift/reduce
State 34 conflicts: 1 shift/reduce
State 37 conflicts: 17 shift/reduce
State 46 conflicts: 2 shift/reduce
State 47 conflicts: 2 shift/reduce
State 48 conflicts: 1 shift/reduce


Grammar

    0 $accept: main $end

    1 main: chunk

    2 chunk: chunk chunk
    3      | var '=' exp
    4      | RETURN exp
    5      | exp
    6      | function
    7      | function_call

    8 function_call: NAME '(' exp ')'

    9 function: FUNCTION NAME '(' args ')' chunk END
   10         | FUNCTION NAME '(' args ')' END

   11 args: exp
   12     | args ',' exp

   13 exp: NIL
   14    | FALSE
   15    | TRUE
   16    | DOTS
   17    | '(' exp ')'
   18    | exp BINOP exp
   19    | exp MINUS exp
   20    | UNOP exp
   21    | MINUS exp
   22    | numeral
   23    | literalString
   24    | var

   25 var: NAME
   26    | NAME '.' NAME
   27    | NAME '[' exp ']'

   28 literalString: ONEQSTRING
   29              | TWOQSTRING
   30              | LONGSTRING

   31 numeral: INT
   32        | HEX
   33        | FLOAT
   34        | HEX_FLOAT


Terminals, with rules where they appear

$end (0) 0
'(' (40) 8 9 10 17
')' (41) 8 9 10 17
',' (44) 12
'.' (46) 26
'=' (61) 3
'[' (91) 27
']' (93) 27
error (256)
INT (258) 31
HEX (259) 32
FLOAT (260) 33
HEX_FLOAT (261) 34
TWOQ (262)
ONEQ (263)
ONEQSTRING (264) 28
TWOQSTRING (265) 29
LONGSTRING (266) 30
NESTED_STR (267)
NAME (268) 8 9 10 25 26 27
DOTS (269) 16
NIL (270) 13
FALSE (271) 14
TRUE (272) 15
BINOP (273) 18
UNOP (274) 20
MINUS (275) 19 21
DO (276)
WHILE (277)
FOR (278)
UNTIL (279)
REPEAT (280)
END (281) 9 10
IF (282)
THEN (283)
ELSEIF (284)
ELSE (285)
LOCAL (286)
FUNCTION (287) 9 10
BREAK (288)
RETURN (289) 4


Nonterminals, with rules where they appear

$accept (42)
    on left: 0
main (43)
    on left: 1, on right: 0
chunk (44)
    on left: 2 3 4 5 6 7, on right: 1 2 9
function_call (45)
    on left: 8, on right: 7
function (46)
    on left: 9 10, on right: 6
args (47)
    on left: 11 12, on right: 9 10 12
exp (48)
    on left: 13 14 15 16 17 18 19 20 21 22 23 24, on right: 3 4 5 8
    11 12 17 18 19 20 21 27
var (49)
    on left: 25 26 27, on right: 3 24
literalString (50)
    on left: 28 29 30, on right: 23
numeral (51)
    on left: 31 32 33 34, on right: 22


State 0

    0 $accept: . main $end

    INT         shift, and go to state 1
    HEX         shift, and go to state 2
    FLOAT       shift, and go to state 3
    HEX_FLOAT   shift, and go to state 4
    ONEQSTRING  shift, and go to state 5
    TWOQSTRING  shift, and go to state 6
    LONGSTRING  shift, and go to state 7
    NAME        shift, and go to state 8
    DOTS        shift, and go to state 9
    NIL         shift, and go to state 10
    FALSE       shift, and go to state 11
    TRUE        shift, and go to state 12
    UNOP        shift, and go to state 13
    MINUS       shift, and go to state 14
    FUNCTION    shift, and go to state 15
    RETURN      shift, and go to state 16
    '('         shift, and go to state 17

    main           go to state 18
    chunk          go to state 19
    function_call  go to state 20
    function       go to state 21
    exp            go to state 22
    var            go to state 23
    literalString  go to state 24
    numeral        go to state 25


State 1

   31 numeral: INT .

    $default  reduce using rule 31 (numeral)


State 2

   32 numeral: HEX .

    $default  reduce using rule 32 (numeral)


State 3

   33 numeral: FLOAT .

    $default  reduce using rule 33 (numeral)


State 4

   34 numeral: HEX_FLOAT .

    $default  reduce using rule 34 (numeral)


State 5

   28 literalString: ONEQSTRING .

    $default  reduce using rule 28 (literalString)


State 6

   29 literalString: TWOQSTRING .

    $default  reduce using rule 29 (literalString)


State 7

   30 literalString: LONGSTRING .

    $default  reduce using rule 30 (literalString)


State 8

    8 function_call: NAME . '(' exp ')'
   25 var: NAME .
   26    | NAME . '.' NAME
   27    | NAME . '[' exp ']'

    '('  shift, and go to state 26
    '.'  shift, and go to state 27
    '['  shift, and go to state 28

    '('       [reduce using rule 25 (var)]
    $default  reduce using rule 25 (var)


State 9

   16 exp: DOTS .

    $default  reduce using rule 16 (exp)


State 10

   13 exp: NIL .

    $default  reduce using rule 13 (exp)


State 11

   14 exp: FALSE .

    $default  reduce using rule 14 (exp)


State 12

   15 exp: TRUE .

    $default  reduce using rule 15 (exp)


State 13

   20 exp: UNOP . exp

    INT         shift, and go to state 1
    HEX         shift, and go to state 2
    FLOAT       shift, and go to state 3
    HEX_FLOAT   shift, and go to state 4
    ONEQSTRING  shift, and go to state 5
    TWOQSTRING  shift, and go to state 6
    LONGSTRING  shift, and go to state 7
    NAME        shift, and go to state 29
    DOTS        shift, and go to state 9
    NIL         shift, and go to state 10
    FALSE       shift, and go to state 11
    TRUE        shift, and go to state 12
    UNOP        shift, and go to state 13
    MINUS       shift, and go to state 14
    '('         shift, and go to state 17

    exp            go to state 30
    var            go to state 31
    literalString  go to state 24
    numeral        go to state 25


State 14

   21 exp: MINUS . exp

    INT         shift, and go to state 1
    HEX         shift, and go to state 2
    FLOAT       shift, and go to state 3
    HEX_FLOAT   shift, and go to state 4
    ONEQSTRING  shift, and go to state 5
    TWOQSTRING  shift, and go to state 6
    LONGSTRING  shift, and go to state 7
    NAME        shift, and go to state 29
    DOTS        shift, and go to state 9
    NIL         shift, and go to state 10
    FALSE       shift, and go to state 11
    TRUE        shift, and go to state 12
    UNOP        shift, and go to state 13
    MINUS       shift, and go to state 14
    '('         shift, and go to state 17

    exp            go to state 32
    var            go to state 31
    literalString  go to state 24
    numeral        go to state 25


State 15

    9 function: FUNCTION . NAME '(' args ')' chunk END
   10         | FUNCTION . NAME '(' args ')' END

    NAME  shift, and go to state 33


State 16

    4 chunk: RETURN . exp

    INT         shift, and go to state 1
    HEX         shift, and go to state 2
    FLOAT       shift, and go to state 3
    HEX_FLOAT   shift, and go to state 4
    ONEQSTRING  shift, and go to state 5
    TWOQSTRING  shift, and go to state 6
    LONGSTRING  shift, and go to state 7
    NAME        shift, and go to state 29
    DOTS        shift, and go to state 9
    NIL         shift, and go to state 10
    FALSE       shift, and go to state 11
    TRUE        shift, and go to state 12
    UNOP        shift, and go to state 13
    MINUS       shift, and go to state 14
    '('         shift, and go to state 17

    exp            go to state 34
    var            go to state 31
    literalString  go to state 24
    numeral        go to state 25


State 17

   17 exp: '(' . exp ')'

    INT         shift, and go to state 1
    HEX         shift, and go to state 2
    FLOAT       shift, and go to state 3
    HEX_FLOAT   shift, and go to state 4
    ONEQSTRING  shift, and go to state 5
    TWOQSTRING  shift, and go to state 6
    LONGSTRING  shift, and go to state 7
    NAME        shift, and go to state 29
    DOTS        shift, and go to state 9
    NIL         shift, and go to state 10
    FALSE       shift, and go to state 11
    TRUE        shift, and go to state 12
    UNOP        shift, and go to state 13
    MINUS       shift, and go to state 14
    '('         shift, and go to state 17

    exp            go to state 35
    var            go to state 31
    literalString  go to state 24
    numeral        go to state 25


State 18

    0 $accept: main . $end

    $end  shift, and go to state 36


State 19

    1 main: chunk .
    2 chunk: chunk . chunk

    INT         shift, and go to state 1
    HEX         shift, and go to state 2
    FLOAT       shift, and go to state 3
    HEX_FLOAT   shift, and go to state 4
    ONEQSTRING  shift, and go to state 5
    TWOQSTRING  shift, and go to state 6
    LONGSTRING  shift, and go to state 7
    NAME        shift, and go to state 8
    DOTS        shift, and go to state 9
    NIL         shift, and go to state 10
    FALSE       shift, and go to state 11
    TRUE        shift, and go to state 12
    UNOP        shift, and go to state 13
    MINUS       shift, and go to state 14
    FUNCTION    shift, and go to state 15
    RETURN      shift, and go to state 16
    '('         shift, and go to state 17

    $default  reduce using rule 1 (main)

    chunk          go to state 37
    function_call  go to state 20
    function       go to state 21
    exp            go to state 22
    var            go to state 23
    literalString  go to state 24
    numeral        go to state 25


State 20

    7 chunk: function_call .

    $default  reduce using rule 7 (chunk)


State 21

    6 chunk: function .

    $default  reduce using rule 6 (chunk)


State 22

    5 chunk: exp .
   18 exp: exp . BINOP exp
   19    | exp . MINUS exp

    BINOP  shift, and go to state 38
    MINUS  shift, and go to state 39

    MINUS     [reduce using rule 5 (chunk)]
    $default  reduce using rule 5 (chunk)


State 23

    3 chunk: var . '=' exp
   24 exp: var .

    '='  shift, and go to state 40

    $default  reduce using rule 24 (exp)


State 24

   23 exp: literalString .

    $default  reduce using rule 23 (exp)


State 25

   22 exp: numeral .

    $default  reduce using rule 22 (exp)


State 26

    8 function_call: NAME '(' . exp ')'

    INT         shift, and go to state 1
    HEX         shift, and go to state 2
    FLOAT       shift, and go to state 3
    HEX_FLOAT   shift, and go to state 4
    ONEQSTRING  shift, and go to state 5
    TWOQSTRING  shift, and go to state 6
    LONGSTRING  shift, and go to state 7
    NAME        shift, and go to state 29
    DOTS        shift, and go to state 9
    NIL         shift, and go to state 10
    FALSE       shift, and go to state 11
    TRUE        shift, and go to state 12
    UNOP        shift, and go to state 13
    MINUS       shift, and go to state 14
    '('         shift, and go to state 17

    exp            go to state 41
    var            go to state 31
    literalString  go to state 24
    numeral        go to state 25


State 27

   26 var: NAME '.' . NAME

    NAME  shift, and go to state 42


State 28

   27 var: NAME '[' . exp ']'

    INT         shift, and go to state 1
    HEX         shift, and go to state 2
    FLOAT       shift, and go to state 3
    HEX_FLOAT   shift, and go to state 4
    ONEQSTRING  shift, and go to state 5
    TWOQSTRING  shift, and go to state 6
    LONGSTRING  shift, and go to state 7
    NAME        shift, and go to state 29
    DOTS        shift, and go to state 9
    NIL         shift, and go to state 10
    FALSE       shift, and go to state 11
    TRUE        shift, and go to state 12
    UNOP        shift, and go to state 13
    MINUS       shift, and go to state 14
    '('         shift, and go to state 17

    exp            go to state 43
    var            go to state 31
    literalString  go to state 24
    numeral        go to state 25


State 29

   25 var: NAME .
   26    | NAME . '.' NAME
   27    | NAME . '[' exp ']'

    '.'  shift, and go to state 27
    '['  shift, and go to state 28

    $default  reduce using rule 25 (var)


State 30

   18 exp: exp . BINOP exp
   19    | exp . MINUS exp
   20    | UNOP exp .

    BINOP  shift, and go to state 38
    MINUS  shift, and go to state 39

    BINOP     [reduce using rule 20 (exp)]
    MINUS     [reduce using rule 20 (exp)]
    $default  reduce using rule 20 (exp)


State 31

   24 exp: var .

    $default  reduce using rule 24 (exp)


State 32

   18 exp: exp . BINOP exp
   19    | exp . MINUS exp
   21    | MINUS exp .

    BINOP  shift, and go to state 38
    MINUS  shift, and go to state 39

    BINOP     [reduce using rule 21 (exp)]
    MINUS     [reduce using rule 21 (exp)]
    $default  reduce using rule 21 (exp)


State 33

    9 function: FUNCTION NAME . '(' args ')' chunk END
   10         | FUNCTION NAME . '(' args ')' END

    '('  shift, and go to state 44


State 34

    4 chunk: RETURN exp .
   18 exp: exp . BINOP exp
   19    | exp . MINUS exp

    BINOP  shift, and go to state 38
    MINUS  shift, and go to state 39

    MINUS     [reduce using rule 4 (chunk)]
    $default  reduce using rule 4 (chunk)


State 35

   17 exp: '(' exp . ')'
   18    | exp . BINOP exp
   19    | exp . MINUS exp

    BINOP  shift, and go to state 38
    MINUS  shift, and go to state 39
    ')'    shift, and go to state 45


State 36

    0 $accept: main $end .

    $default  accept


State 37

    2 chunk: chunk . chunk
    2      | chunk chunk .

    INT         shift, and go to state 1
    HEX         shift, and go to state 2
    FLOAT       shift, and go to state 3
    HEX_FLOAT   shift, and go to state 4
    ONEQSTRING  shift, and go to state 5
    TWOQSTRING  shift, and go to state 6
    LONGSTRING  shift, and go to state 7
    NAME        shift, and go to state 8
    DOTS        shift, and go to state 9
    NIL         shift, and go to state 10
    FALSE       shift, and go to state 11
    TRUE        shift, and go to state 12
    UNOP        shift, and go to state 13
    MINUS       shift, and go to state 14
    FUNCTION    shift, and go to state 15
    RETURN      shift, and go to state 16
    '('         shift, and go to state 17

    INT         [reduce using rule 2 (chunk)]
    HEX         [reduce using rule 2 (chunk)]
    FLOAT       [reduce using rule 2 (chunk)]
    HEX_FLOAT   [reduce using rule 2 (chunk)]
    ONEQSTRING  [reduce using rule 2 (chunk)]
    TWOQSTRING  [reduce using rule 2 (chunk)]
    LONGSTRING  [reduce using rule 2 (chunk)]
    NAME        [reduce using rule 2 (chunk)]
    DOTS        [reduce using rule 2 (chunk)]
    NIL         [reduce using rule 2 (chunk)]
    FALSE       [reduce using rule 2 (chunk)]
    TRUE        [reduce using rule 2 (chunk)]
    UNOP        [reduce using rule 2 (chunk)]
    MINUS       [reduce using rule 2 (chunk)]
    FUNCTION    [reduce using rule 2 (chunk)]
    RETURN      [reduce using rule 2 (chunk)]
    '('         [reduce using rule 2 (chunk)]
    $default    reduce using rule 2 (chunk)

    chunk          go to state 37
    function_call  go to state 20
    function       go to state 21
    exp            go to state 22
    var            go to state 23
    literalString  go to state 24
    numeral        go to state 25


State 38

   18 exp: exp BINOP . exp

    INT         shift, and go to state 1
    HEX         shift, and go to state 2
    FLOAT       shift, and go to state 3
    HEX_FLOAT   shift, and go to state 4
    ONEQSTRING  shift, and go to state 5
    TWOQSTRING  shift, and go to state 6
    LONGSTRING  shift, and go to state 7
    NAME        shift, and go to state 29
    DOTS        shift, and go to state 9
    NIL         shift, and go to state 10
    FALSE       shift, and go to state 11
    TRUE        shift, and go to state 12
    UNOP        shift, and go to state 13
    MINUS       shift, and go to state 14
    '('         shift, and go to state 17

    exp            go to state 46
    var            go to state 31
    literalString  go to state 24
    numeral        go to state 25


State 39

   19 exp: exp MINUS . exp

    INT         shift, and go to state 1
    HEX         shift, and go to state 2
    FLOAT       shift, and go to state 3
    HEX_FLOAT   shift, and go to state 4
    ONEQSTRING  shift, and go to state 5
    TWOQSTRING  shift, and go to state 6
    LONGSTRING  shift, and go to state 7
    NAME        shift, and go to state 29
    DOTS        shift, and go to state 9
    NIL         shift, and go to state 10
    FALSE       shift, and go to state 11
    TRUE        shift, and go to state 12
    UNOP        shift, and go to state 13
    MINUS       shift, and go to state 14
    '('         shift, and go to state 17

    exp            go to state 47
    var            go to state 31
    literalString  go to state 24
    numeral        go to state 25


State 40

    3 chunk: var '=' . exp

    INT         shift, and go to state 1
    HEX         shift, and go to state 2
    FLOAT       shift, and go to state 3
    HEX_FLOAT   shift, and go to state 4
    ONEQSTRING  shift, and go to state 5
    TWOQSTRING  shift, and go to state 6
    LONGSTRING  shift, and go to state 7
    NAME        shift, and go to state 29
    DOTS        shift, and go to state 9
    NIL         shift, and go to state 10
    FALSE       shift, and go to state 11
    TRUE        shift, and go to state 12
    UNOP        shift, and go to state 13
    MINUS       shift, and go to state 14
    '('         shift, and go to state 17

    exp            go to state 48
    var            go to state 31
    literalString  go to state 24
    numeral        go to state 25


State 41

    8 function_call: NAME '(' exp . ')'
   18 exp: exp . BINOP exp
   19    | exp . MINUS exp

    BINOP  shift, and go to state 38
    MINUS  shift, and go to state 39
    ')'    shift, and go to state 49


State 42

   26 var: NAME '.' NAME .

    $default  reduce using rule 26 (var)


State 43

   18 exp: exp . BINOP exp
   19    | exp . MINUS exp
   27 var: NAME '[' exp . ']'

    BINOP  shift, and go to state 38
    MINUS  shift, and go to state 39
    ']'    shift, and go to state 50


State 44

    9 function: FUNCTION NAME '(' . args ')' chunk END
   10         | FUNCTION NAME '(' . args ')' END

    INT         shift, and go to state 1
    HEX         shift, and go to state 2
    FLOAT       shift, and go to state 3
    HEX_FLOAT   shift, and go to state 4
    ONEQSTRING  shift, and go to state 5
    TWOQSTRING  shift, and go to state 6
    LONGSTRING  shift, and go to state 7
    NAME        shift, and go to state 29
    DOTS        shift, and go to state 9
    NIL         shift, and go to state 10
    FALSE       shift, and go to state 11
    TRUE        shift, and go to state 12
    UNOP        shift, and go to state 13
    MINUS       shift, and go to state 14
    '('         shift, and go to state 17

    args           go to state 51
    exp            go to state 52
    var            go to state 31
    literalString  go to state 24
    numeral        go to state 25


State 45

   17 exp: '(' exp ')' .

    $default  reduce using rule 17 (exp)


State 46

   18 exp: exp . BINOP exp
   18    | exp BINOP exp .
   19    | exp . MINUS exp

    BINOP  shift, and go to state 38
    MINUS  shift, and go to state 39

    BINOP     [reduce using rule 18 (exp)]
    MINUS     [reduce using rule 18 (exp)]
    $default  reduce using rule 18 (exp)


State 47

   18 exp: exp . BINOP exp
   19    | exp . MINUS exp
   19    | exp MINUS exp .

    BINOP  shift, and go to state 38
    MINUS  shift, and go to state 39

    BINOP     [reduce using rule 19 (exp)]
    MINUS     [reduce using rule 19 (exp)]
    $default  reduce using rule 19 (exp)


State 48

    3 chunk: var '=' exp .
   18 exp: exp . BINOP exp
   19    | exp . MINUS exp

    BINOP  shift, and go to state 38
    MINUS  shift, and go to state 39

    MINUS     [reduce using rule 3 (chunk)]
    $default  reduce using rule 3 (chunk)


State 49

    8 function_call: NAME '(' exp ')' .

    $default  reduce using rule 8 (function_call)


State 50

   27 var: NAME '[' exp ']' .

    $default  reduce using rule 27 (var)


State 51

    9 function: FUNCTION NAME '(' args . ')' chunk END
   10         | FUNCTION NAME '(' args . ')' END
   12 args: args . ',' exp

    ')'  shift, and go to state 53
    ','  shift, and go to state 54


State 52

   11 args: exp .
   18 exp: exp . BINOP exp
   19    | exp . MINUS exp

    BINOP  shift, and go to state 38
    MINUS  shift, and go to state 39

    $default  reduce using rule 11 (args)


State 53

    9 function: FUNCTION NAME '(' args ')' . chunk END
   10         | FUNCTION NAME '(' args ')' . END

    INT         shift, and go to state 1
    HEX         shift, and go to state 2
    FLOAT       shift, and go to state 3
    HEX_FLOAT   shift, and go to state 4
    ONEQSTRING  shift, and go to state 5
    TWOQSTRING  shift, and go to state 6
    LONGSTRING  shift, and go to state 7
    NAME        shift, and go to state 8
    DOTS        shift, and go to state 9
    NIL         shift, and go to state 10
    FALSE       shift, and go to state 11
    TRUE        shift, and go to state 12
    UNOP        shift, and go to state 13
    MINUS       shift, and go to state 14
    END         shift, and go to state 55
    FUNCTION    shift, and go to state 15
    RETURN      shift, and go to state 16
    '('         shift, and go to state 17

    chunk          go to state 56
    function_call  go to state 20
    function       go to state 21
    exp            go to state 22
    var            go to state 23
    literalString  go to state 24
    numeral        go to state 25


State 54

   12 args: args ',' . exp

    INT         shift, and go to state 1
    HEX         shift, and go to state 2
    FLOAT       shift, and go to state 3
    HEX_FLOAT   shift, and go to state 4
    ONEQSTRING  shift, and go to state 5
    TWOQSTRING  shift, and go to state 6
    LONGSTRING  shift, and go to state 7
    NAME        shift, and go to state 29
    DOTS        shift, and go to state 9
    NIL         shift, and go to state 10
    FALSE       shift, and go to state 11
    TRUE        shift, and go to state 12
    UNOP        shift, and go to state 13
    MINUS       shift, and go to state 14
    '('         shift, and go to state 17

    exp            go to state 57
    var            go to state 31
    literalString  go to state 24
    numeral        go to state 25


State 55

   10 function: FUNCTION NAME '(' args ')' END .

    $default  reduce using rule 10 (function)


State 56

    2 chunk: chunk . chunk
    9 function: FUNCTION NAME '(' args ')' chunk . END

    INT         shift, and go to state 1
    HEX         shift, and go to state 2
    FLOAT       shift, and go to state 3
    HEX_FLOAT   shift, and go to state 4
    ONEQSTRING  shift, and go to state 5
    TWOQSTRING  shift, and go to state 6
    LONGSTRING  shift, and go to state 7
    NAME        shift, and go to state 8
    DOTS        shift, and go to state 9
    NIL         shift, and go to state 10
    FALSE       shift, and go to state 11
    TRUE        shift, and go to state 12
    UNOP        shift, and go to state 13
    MINUS       shift, and go to state 14
    END         shift, and go to state 58
    FUNCTION    shift, and go to state 15
    RETURN      shift, and go to state 16
    '('         shift, and go to state 17

    chunk          go to state 37
    function_call  go to state 20
    function       go to state 21
    exp            go to state 22
    var            go to state 23
    literalString  go to state 24
    numeral        go to state 25


State 57

   12 args: args ',' exp .
   18 exp: exp . BINOP exp
   19    | exp . MINUS exp

    BINOP  shift, and go to state 38
    MINUS  shift, and go to state 39

    $default  reduce using rule 12 (args)


State 58

    9 function: FUNCTION NAME '(' args ')' chunk END .

    $default  reduce using rule 9 (function)
